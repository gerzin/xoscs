// Code generated by xgen. DO NOT EDIT.

package xosc

// OpenSCENARIO ...
type OpenSCENARIO *OpenScenario

// Parameter ...
type Parameter string

// Expression ...
type Expression string

// Boolean ...
type Boolean struct {
	Boolean    bool
	Parameter  string
	Expression string
}

// DateTime ...
type DateTime struct {
	Parameter string
	DateTime  string
}

// Double ...
type Double struct {
	Double     float64
	Parameter  string
	Expression string
}

// Int ...
type Int struct {
	Int        int
	Parameter  string
	Expression string
}

// String ...
type String struct {
	String    string
	Parameter string
}

// UnsignedInt ...
type UnsignedInt struct {
	Parameter   string
	Expression  string
	UnsignedInt uint32
}

// UnsignedShort ...
type UnsignedShort struct {
	Parameter     string
	Expression    string
	UnsignedShort uint16
}

// AngleType ...
type AngleType string

// AutomaticGearType ...
type AutomaticGearType string

// CloudState is deprecated
type CloudState string

// ColorType ...
type ColorType string

// ConditionEdge ...
type ConditionEdge string

// ControllerType ...
type ControllerType string

// CoordinateSystem ...
type CoordinateSystem string

// DirectionalDimension ...
type DirectionalDimension string

// DynamicsDimension ...
type DynamicsDimension string

// DynamicsShape ...
type DynamicsShape string

// FollowingMode ...
type FollowingMode string

// FractionalCloudCover ...
type FractionalCloudCover string

// LateralDisplacement ...
type LateralDisplacement string

// LightMode ...
type LightMode string

// LongitudinalDisplacement ...
type LongitudinalDisplacement string

// MiscObjectCategory is deprecated
type MiscObjectCategory string

// ObjectType ...
type ObjectType string

// ParameterType is deprecated
type ParameterType string

// PedestrianCategory ...
type PedestrianCategory string

// PedestrianGestureType ...
type PedestrianGestureType string

// PedestrianMotionType ...
type PedestrianMotionType string

// PrecipitationType ...
type PrecipitationType string

// Priority is deprecated
type Priority string

// ReferenceContext ...
type ReferenceContext string

// RelativeDistanceType is deprecated
type RelativeDistanceType string

// Role ...
type Role string

// RouteStrategy ...
type RouteStrategy string

// RoutingAlgorithm ...
type RoutingAlgorithm string

// Rule ...
type Rule string

// SpeedTargetValueType ...
type SpeedTargetValueType string

// StoryboardElementState ...
type StoryboardElementState string

// StoryboardElementType ...
type StoryboardElementType string

// TriggeringEntitiesRule ...
type TriggeringEntitiesRule string

// VehicleCategory ...
type VehicleCategory string

// VehicleComponentType ...
type VehicleComponentType string

// VehicleLightType ...
type VehicleLightType string

// Wetness ...
type Wetness string

// AbsoluteSpeed ...
type AbsoluteSpeed struct {
	ValueAttr   *Double `xml:"value,attr"`
	SteadyState *SteadyState
}

// AbsoluteTargetLane ...
type AbsoluteTargetLane struct {
	ValueAttr *String `xml:"value,attr"`
}

// AbsoluteTargetLaneOffset ...
type AbsoluteTargetLaneOffset struct {
	ValueAttr *Double `xml:"value,attr"`
}

// AbsoluteTargetSpeed ...
type AbsoluteTargetSpeed struct {
	ValueAttr *Double `xml:"value,attr"`
}

// AccelerationCondition ...
type AccelerationCondition struct {
	RuleAttr      *Rule                 `xml:"rule,attr"`
	ValueAttr     *Double               `xml:"value,attr"`
	DirectionAttr *DirectionalDimension `xml:"direction,attr,omitempty"`
}

// AcquirePositionAction ...
type AcquirePositionAction struct {
	Position *Position `xml:"Position"`
}

// Act ...
type Act struct {
	NameAttr      *String          `xml:"name,attr"`
	ManeuverGroup []*ManeuverGroup `xml:"ManeuverGroup"`
	StartTrigger  *Trigger         `xml:"StartTrigger"`
	StopTrigger   *Trigger         `xml:"StopTrigger"`
}

// Action ...
type Action struct {
	NameAttr          *String            `xml:"name,attr"`
	GlobalAction      *GlobalAction      `xml:"GlobalAction"`
	UserDefinedAction *UserDefinedAction `xml:"UserDefinedAction"`
	PrivateAction     *PrivateAction     `xml:"PrivateAction"`
}

// ActivateControllerAction ...
type ActivateControllerAction struct {
	ControllerRefAttr       *String  `xml:"controllerRef,attr,omitempty"`
	ObjectControllerRefAttr *String  `xml:"objectControllerRef,attr,omitempty"`
	LateralAttr             *Boolean `xml:"lateral,attr,omitempty"`
	LongitudinalAttr        *Boolean `xml:"longitudinal,attr,omitempty"`
	AnimationAttr           *Boolean `xml:"animation,attr,omitempty"`
	LightingAttr            *Boolean `xml:"lighting,attr,omitempty"`
}

// Actors ...
type Actors struct {
	SelectTriggeringEntitiesAttr *Boolean     `xml:"selectTriggeringEntities,attr"`
	EntityRef                    []*EntityRef `xml:"EntityRef"`
}

// AddEntityAction ...
type AddEntityAction struct {
	Position *Position `xml:"Position"`
}

// AngleCondition ...
type AngleCondition struct {
	AngleTypeAttr        *AngleType        `xml:"angleType,attr"`
	AngleAttr            *Double           `xml:"angle,attr"`
	AngleToleranceAttr   *Double           `xml:"angleTolerance,attr"`
	CoordinateSystemAttr *CoordinateSystem `xml:"coordinateSystem,attr,omitempty"`
}

// AnimationAction ...
type AnimationAction struct {
	LoopAttr              *Boolean        `xml:"loop,attr,omitempty"`
	AnimationDurationAttr *Double         `xml:"animationDuration,attr,omitempty"`
	AnimationType         *AnimationType  `xml:"AnimationType"`
	AnimationState        *AnimationState `xml:"AnimationState"`
}

// AnimationFile ...
type AnimationFile struct {
	TimeOffsetAttr *Double `xml:"timeOffset,attr,omitempty"`
	File           *File   `xml:"File"`
}

// AnimationState ...
type AnimationState struct {
	StateAttr *Double `xml:"state,attr"`
}

// AnimationType ...
type AnimationType struct {
	ComponentAnimation   *ComponentAnimation   `xml:"ComponentAnimation"`
	PedestrianAnimation  *PedestrianAnimation  `xml:"PedestrianAnimation"`
	AnimationFile        *AnimationFile        `xml:"AnimationFile"`
	UserDefinedAnimation *UserDefinedAnimation `xml:"UserDefinedAnimation"`
}

// AppearanceAction ...
type AppearanceAction struct {
	LightStateAction *LightStateAction `xml:"LightStateAction"`
	AnimationAction  *AnimationAction  `xml:"AnimationAction"`
}

// AssignControllerAction is deprecated
type AssignControllerAction struct {
	ActivateLateralAttr      *Boolean          `xml:"activateLateral,attr,omitempty"`
	ActivateLongitudinalAttr *Boolean          `xml:"activateLongitudinal,attr,omitempty"`
	ActivateAnimationAttr    *Boolean          `xml:"activateAnimation,attr,omitempty"`
	ActivateLightingAttr     *Boolean          `xml:"activateLighting,attr,omitempty"`
	Controller               *Controller       `xml:"Controller"`
	CatalogReference         *CatalogReference `xml:"CatalogReference"`
	ObjectController         *ObjectController `xml:"ObjectController"`
}

// AssignRouteAction ...
type AssignRouteAction struct {
	Route            *Route            `xml:"Route"`
	CatalogReference *CatalogReference `xml:"CatalogReference"`
}

// AutomaticGear ...
type AutomaticGear struct {
	GearAttr *AutomaticGearType `xml:"gear,attr"`
}

// Axle ...
type Axle struct {
	MaxSteeringAttr   *Double `xml:"maxSteering,attr"`
	PositionXAttr     *Double `xml:"positionX,attr"`
	PositionZAttr     *Double `xml:"positionZ,attr"`
	TrackWidthAttr    *Double `xml:"trackWidth,attr"`
	WheelDiameterAttr *Double `xml:"wheelDiameter,attr"`
}

// Axles ...
type Axles struct {
	FrontAxle      *Axle   `xml:"FrontAxle"`
	RearAxle       *Axle   `xml:"RearAxle"`
	AdditionalAxle []*Axle `xml:"AdditionalAxle"`
}

// BoundingBox ...
type BoundingBox struct {
	Center     *Center     `xml:"Center"`
	Dimensions *Dimensions `xml:"Dimensions"`
}

// Brake ...
type Brake struct {
	ValueAttr   *Double `xml:"value,attr"`
	MaxRateAttr *Double `xml:"maxRate,attr,omitempty"`
}

// BrakeInput ...
type BrakeInput struct {
	BrakePercent *Brake
	BrakeForce   *Brake
}

// ByEntityCondition ...
type ByEntityCondition struct {
	TriggeringEntities *TriggeringEntities `xml:"TriggeringEntities"`
	EntityCondition    *EntityCondition    `xml:"EntityCondition"`
}

// ByObjectType ...
type ByObjectType struct {
	TypeAttr *ObjectType `xml:"type,attr"`
}

// ByType ...
type ByType struct {
	ObjectTypeAttr *ObjectType `xml:"objectType,attr"`
}

// ByValueCondition ...
type ByValueCondition struct {
	ParameterCondition               *ParameterCondition               `xml:"ParameterCondition"`
	TimeOfDayCondition               *TimeOfDayCondition               `xml:"TimeOfDayCondition"`
	SimulationTimeCondition          *SimulationTimeCondition          `xml:"SimulationTimeCondition"`
	StoryboardElementStateCondition  *StoryboardElementStateCondition  `xml:"StoryboardElementStateCondition"`
	UserDefinedValueCondition        *UserDefinedValueCondition        `xml:"UserDefinedValueCondition"`
	TrafficSignalCondition           *TrafficSignalCondition           `xml:"TrafficSignalCondition"`
	TrafficSignalControllerCondition *TrafficSignalControllerCondition `xml:"TrafficSignalControllerCondition"`
	VariableCondition                *VariableCondition                `xml:"VariableCondition"`
}

// Catalog ...
type Catalog struct {
	NameAttr    *String        `xml:"name,attr"`
	Vehicle     []*Vehicle     `xml:"Vehicle"`
	Controller  []*Controller  `xml:"Controller"`
	Pedestrian  []*Pedestrian  `xml:"Pedestrian"`
	MiscObject  []*MiscObject  `xml:"MiscObject"`
	Environment []*Environment `xml:"Environment"`
	Maneuver    []*Maneuver    `xml:"Maneuver"`
	Trajectory  []*Trajectory  `xml:"Trajectory"`
	Route       []*Route       `xml:"Route"`
}

// CatalogDefinition ...
type CatalogDefinition struct {
	Catalog *Catalog
}

// CatalogLocations ...
type CatalogLocations struct {
	VehicleCatalog     *VehicleCatalogLocation     `xml:"VehicleCatalog"`
	ControllerCatalog  *ControllerCatalogLocation  `xml:"ControllerCatalog"`
	PedestrianCatalog  *PedestrianCatalogLocation  `xml:"PedestrianCatalog"`
	MiscObjectCatalog  *MiscObjectCatalogLocation  `xml:"MiscObjectCatalog"`
	EnvironmentCatalog *EnvironmentCatalogLocation `xml:"EnvironmentCatalog"`
	ManeuverCatalog    *ManeuverCatalogLocation    `xml:"ManeuverCatalog"`
	TrajectoryCatalog  *TrajectoryCatalogLocation  `xml:"TrajectoryCatalog"`
	RouteCatalog       *RouteCatalogLocation       `xml:"RouteCatalog"`
}

// CatalogReference ...
type CatalogReference struct {
	CatalogNameAttr      *String               `xml:"catalogName,attr"`
	EntryNameAttr        *String               `xml:"entryName,attr"`
	ParameterAssignments *ParameterAssignments `xml:"ParameterAssignments"`
}

// Center ...
type Center struct {
	XAttr *Double `xml:"x,attr"`
	YAttr *Double `xml:"y,attr"`
	ZAttr *Double `xml:"z,attr"`
}

// CentralSwarmObject ...
type CentralSwarmObject struct {
	EntityRefAttr *String `xml:"entityRef,attr"`
}

// Clothoid ...
type Clothoid struct {
	CurvatureAttr      *Double   `xml:"curvature,attr"`
	CurvatureDotAttr   *Double   `xml:"curvatureDot,attr,omitempty"`
	LengthAttr         *Double   `xml:"length,attr"`
	StartTimeAttr      *Double   `xml:"startTime,attr,omitempty"`
	StopTimeAttr       *Double   `xml:"stopTime,attr,omitempty"`
	CurvaturePrimeAttr *Double   `xml:"curvaturePrime,attr,omitempty"`
	Position           *Position `xml:"Position"`
}

// ClothoidSpline ...
type ClothoidSpline struct {
	TimeEndAttr           *Double                  `xml:"timeEnd,attr,omitempty"`
	ClothoidSplineSegment []*ClothoidSplineSegment `xml:"ClothoidSplineSegment"`
}

// ClothoidSplineSegment ...
type ClothoidSplineSegment struct {
	CurvatureStartAttr *Double   `xml:"curvatureStart,attr"`
	CurvatureEndAttr   *Double   `xml:"curvatureEnd,attr"`
	LengthAttr         *Double   `xml:"length,attr"`
	HOffsetAttr        *Double   `xml:"hOffset,attr,omitempty"`
	TimeStartAttr      *Double   `xml:"timeStart,attr,omitempty"`
	PositionStart      *Position `xml:"PositionStart"`
}

// CollisionCondition ...
type CollisionCondition struct {
	EntityRef *EntityRef    `xml:"EntityRef"`
	ByType    *ByObjectType `xml:"ByType"`
}

// Color ...
type Color struct {
	ColorTypeAttr *ColorType `xml:"colorType,attr"`
	ColorRgb      *ColorRgb  `xml:"ColorRgb"`
	ColorCmyk     *ColorCmyk `xml:"ColorCmyk"`
}

// ColorCmyk ...
type ColorCmyk struct {
	CyanAttr    *Double `xml:"cyan,attr"`
	MagentaAttr *Double `xml:"magenta,attr"`
	YellowAttr  *Double `xml:"yellow,attr"`
	KeyAttr     *Double `xml:"key,attr"`
}

// ColorRgb ...
type ColorRgb struct {
	RedAttr   *Double `xml:"red,attr"`
	GreenAttr *Double `xml:"green,attr"`
	BlueAttr  *Double `xml:"blue,attr"`
}

// ComponentAnimation ...
type ComponentAnimation struct {
	VehicleComponent     *VehicleComponent     `xml:"VehicleComponent"`
	UserDefinedComponent *UserDefinedComponent `xml:"UserDefinedComponent"`
}

// Condition ...
type Condition struct {
	ConditionEdgeAttr *ConditionEdge     `xml:"conditionEdge,attr"`
	DelayAttr         *Double            `xml:"delay,attr"`
	NameAttr          *String            `xml:"name,attr"`
	ByEntityCondition *ByEntityCondition `xml:"ByEntityCondition"`
	ByValueCondition  *ByValueCondition  `xml:"ByValueCondition"`
}

// ConditionGroup ...
type ConditionGroup struct {
	Condition []*Condition `xml:"Condition"`
}

// ConnectTrailerAction ...
type ConnectTrailerAction struct {
	TrailerRefAttr *String `xml:"trailerRef,attr"`
}

// Controller ...
type Controller struct {
	NameAttr              *String                `xml:"name,attr"`
	ControllerTypeAttr    *ControllerType        `xml:"controllerType,attr,omitempty"`
	ParameterDeclarations *ParameterDeclarations `xml:"ParameterDeclarations"`
	Properties            *Properties            `xml:"Properties"`
}

// ControllerAction ...
type ControllerAction struct {
	AssignControllerAction        *AssignControllerAction        `xml:"AssignControllerAction"`
	OverrideControllerValueAction *OverrideControllerValueAction `xml:"OverrideControllerValueAction"`
	ActivateControllerAction      *ActivateControllerAction      `xml:"ActivateControllerAction"`
}

// ControllerCatalogLocation ...
type ControllerCatalogLocation struct {
	Directory *Directory `xml:"Directory"`
}

// ControllerDistribution ...
type ControllerDistribution struct {
	ControllerDistributionEntry []*ControllerDistributionEntry `xml:"ControllerDistributionEntry"`
}

// ControllerDistributionEntry ...
type ControllerDistributionEntry struct {
	WeightAttr       *Double           `xml:"weight,attr"`
	Controller       *Controller       `xml:"Controller"`
	CatalogReference *CatalogReference `xml:"CatalogReference"`
}

// ControlPoint ...
type ControlPoint struct {
	TimeAttr   *Double   `xml:"time,attr,omitempty"`
	WeightAttr *Double   `xml:"weight,attr,omitempty"`
	Position   *Position `xml:"Position"`
}

// CustomCommandAction ...
type CustomCommandAction struct {
	TypeAttr *String `xml:"type,attr"`
	Value    string  `xml:",chardata"`
}

// CustomContent ...
type CustomContent struct {
	Value string `xml:",chardata"`
}

// DeleteEntityAction ...
type DeleteEntityAction struct {
}

// Deterministic ...
type Deterministic struct {
	DeterministicParameterDistribution []*DeterministicParameterDistribution
}

// DeterministicMultiParameterDistribution ...
type DeterministicMultiParameterDistribution struct {
	DeterministicMultiParameterDistributionType *DeterministicMultiParameterDistributionType
}

// DeterministicMultiParameterDistributionType ...
type DeterministicMultiParameterDistributionType struct {
	ValueSetDistribution *ValueSetDistribution
}

// DeterministicParameterDistribution ...
type DeterministicParameterDistribution struct {
	DeterministicMultiParameterDistribution  *DeterministicMultiParameterDistribution
	DeterministicSingleParameterDistribution *DeterministicSingleParameterDistribution
}

// DeterministicSingleParameterDistribution ...
type DeterministicSingleParameterDistribution struct {
	ParameterNameAttr                            *String `xml:"parameterName,attr"`
	DeterministicSingleParameterDistributionType *DeterministicSingleParameterDistributionType
}

// DeterministicSingleParameterDistributionType ...
type DeterministicSingleParameterDistributionType struct {
	DistributionSet         *DistributionSet
	DistributionRange       *DistributionRange
	UserDefinedDistribution *UserDefinedDistribution
}

// Dimensions ...
type Dimensions struct {
	HeightAttr *Double `xml:"height,attr"`
	LengthAttr *Double `xml:"length,attr"`
	WidthAttr  *Double `xml:"width,attr"`
}

// DirectionOfTravelDistribution ...
type DirectionOfTravelDistribution struct {
	SameAttr     *Double `xml:"same,attr"`
	OppositeAttr *Double `xml:"opposite,attr"`
}

// Directory ...
type Directory struct {
	PathAttr *String `xml:"path,attr"`
}

// DisconnectTrailerAction ...
type DisconnectTrailerAction struct {
}

// DistanceCondition ...
type DistanceCondition struct {
	AlongRouteAttr           *Boolean              `xml:"alongRoute,attr,omitempty"`
	FreespaceAttr            *Boolean              `xml:"freespace,attr"`
	RuleAttr                 *Rule                 `xml:"rule,attr"`
	ValueAttr                *Double               `xml:"value,attr"`
	CoordinateSystemAttr     *CoordinateSystem     `xml:"coordinateSystem,attr,omitempty"`
	RelativeDistanceTypeAttr *RelativeDistanceType `xml:"relativeDistanceType,attr,omitempty"`
	RoutingAlgorithmAttr     *RoutingAlgorithm     `xml:"routingAlgorithm,attr,omitempty"`
	Position                 *Position             `xml:"Position"`
}

// DistributionDefinition ...
type DistributionDefinition struct {
	Deterministic *Deterministic
	Stochastic    *Stochastic
}

// DistributionRange ...
type DistributionRange struct {
	StepWidthAttr *Double `xml:"stepWidth,attr"`
	Range         *Range  `xml:"Range"`
}

// DistributionSet ...
type DistributionSet struct {
	Element []*DistributionSetElement `xml:"Element"`
}

// DistributionSetElement ...
type DistributionSetElement struct {
	ValueAttr *String `xml:"value,attr"`
}

// DomeImage ...
type DomeImage struct {
	AzimuthOffsetAttr *Double `xml:"azimuthOffset,attr,omitempty"`
	DomeFile          *File   `xml:"DomeFile"`
}

// DynamicConstraints ...
type DynamicConstraints struct {
	MaxAccelerationAttr     *Double `xml:"maxAcceleration,attr,omitempty"`
	MaxAccelerationRateAttr *Double `xml:"maxAccelerationRate,attr,omitempty"`
	MaxDecelerationAttr     *Double `xml:"maxDeceleration,attr,omitempty"`
	MaxDecelerationRateAttr *Double `xml:"maxDecelerationRate,attr,omitempty"`
	MaxSpeedAttr            *Double `xml:"maxSpeed,attr,omitempty"`
}

// EndOfRoadCondition ...
type EndOfRoadCondition struct {
	DurationAttr *Double `xml:"duration,attr"`
}

// Entities ...
type Entities struct {
	ScenarioObject  []*ScenarioObject  `xml:"ScenarioObject"`
	EntitySelection []*EntitySelection `xml:"EntitySelection"`
}

// EntityAction ...
type EntityAction struct {
	EntityRefAttr      *String             `xml:"entityRef,attr"`
	AddEntityAction    *AddEntityAction    `xml:"AddEntityAction"`
	DeleteEntityAction *DeleteEntityAction `xml:"DeleteEntityAction"`
}

// EntityCondition is deprecated
type EntityCondition struct {
	EndOfRoadCondition         *EndOfRoadCondition         `xml:"EndOfRoadCondition"`
	CollisionCondition         *CollisionCondition         `xml:"CollisionCondition"`
	OffroadCondition           *OffroadCondition           `xml:"OffroadCondition"`
	TimeHeadwayCondition       *TimeHeadwayCondition       `xml:"TimeHeadwayCondition"`
	TimeToCollisionCondition   *TimeToCollisionCondition   `xml:"TimeToCollisionCondition"`
	AccelerationCondition      *AccelerationCondition      `xml:"AccelerationCondition"`
	StandStillCondition        *StandStillCondition        `xml:"StandStillCondition"`
	SpeedCondition             *SpeedCondition             `xml:"SpeedCondition"`
	RelativeSpeedCondition     *RelativeSpeedCondition     `xml:"RelativeSpeedCondition"`
	TraveledDistanceCondition  *TraveledDistanceCondition  `xml:"TraveledDistanceCondition"`
	ReachPositionCondition     *ReachPositionCondition     `xml:"ReachPositionCondition"`
	DistanceCondition          *DistanceCondition          `xml:"DistanceCondition"`
	RelativeDistanceCondition  *RelativeDistanceCondition  `xml:"RelativeDistanceCondition"`
	RelativeClearanceCondition *RelativeClearanceCondition `xml:"RelativeClearanceCondition"`
	AngleCondition             *AngleCondition             `xml:"AngleCondition"`
	RelativeAngleCondition     *RelativeAngleCondition     `xml:"RelativeAngleCondition"`
}

// EntityDistribution ...
type EntityDistribution struct {
	EntityDistributionEntry []*EntityDistributionEntry `xml:"EntityDistributionEntry"`
}

// EntityDistributionEntry ...
type EntityDistributionEntry struct {
	WeightAttr             *Double                 `xml:"weight,attr"`
	ScenarioObjectTemplate *ScenarioObjectTemplate `xml:"ScenarioObjectTemplate"`
}

// EntityObject ...
type EntityObject struct {
	CatalogReference        *CatalogReference
	Vehicle                 *Vehicle
	Pedestrian              *Pedestrian
	MiscObject              *MiscObject
	ExternalObjectReference *ExternalObjectReference
}

// EntityRef ...
type EntityRef struct {
	EntityRefAttr *String `xml:"entityRef,attr"`
}

// EntitySelection ...
type EntitySelection struct {
	NameAttr *String           `xml:"name,attr"`
	Members  *SelectedEntities `xml:"Members"`
}

// Environment ...
type Environment struct {
	NameAttr              *String                `xml:"name,attr"`
	ParameterDeclarations *ParameterDeclarations `xml:"ParameterDeclarations"`
	TimeOfDay             *TimeOfDay             `xml:"TimeOfDay"`
	Weather               *Weather               `xml:"Weather"`
	RoadCondition         *RoadCondition         `xml:"RoadCondition"`
}

// EnvironmentAction ...
type EnvironmentAction struct {
	Environment      *Environment      `xml:"Environment"`
	CatalogReference *CatalogReference `xml:"CatalogReference"`
}

// EnvironmentCatalogLocation ...
type EnvironmentCatalogLocation struct {
	Directory *Directory `xml:"Directory"`
}

// Event ...
type Event struct {
	MaximumExecutionCountAttr *UnsignedInt `xml:"maximumExecutionCount,attr,omitempty"`
	NameAttr                  *String      `xml:"name,attr"`
	PriorityAttr              *Priority    `xml:"priority,attr"`
	Action                    []*Action    `xml:"Action"`
	StartTrigger              *Trigger     `xml:"StartTrigger"`
}

// ExternalObjectReference ...
type ExternalObjectReference struct {
	NameAttr *String `xml:"name,attr"`
}

// File ...
type File struct {
	FilepathAttr *String `xml:"filepath,attr"`
}

// FileHeader ...
type FileHeader struct {
	AuthorAttr      *String        `xml:"author,attr"`
	DateAttr        *DateTime      `xml:"date,attr"`
	DescriptionAttr *String        `xml:"description,attr"`
	RevMajorAttr    *UnsignedShort `xml:"revMajor,attr"`
	RevMinorAttr    *UnsignedShort `xml:"revMinor,attr"`
	License         *License       `xml:"License"`
	Properties      *Properties    `xml:"Properties"`
}

// FinalSpeed ...
type FinalSpeed struct {
	AbsoluteSpeed         *AbsoluteSpeed         `xml:"AbsoluteSpeed"`
	RelativeSpeedToMaster *RelativeSpeedToMaster `xml:"RelativeSpeedToMaster"`
}

// Fog ...
type Fog struct {
	VisualRangeAttr *Double      `xml:"visualRange,attr"`
	BoundingBox     *BoundingBox `xml:"BoundingBox"`
}

// FollowTrajectoryAction is deprecated
type FollowTrajectoryAction struct {
	InitialDistanceOffsetAttr *Double                  `xml:"initialDistanceOffset,attr,omitempty"`
	Trajectory                *Trajectory              `xml:"Trajectory"`
	CatalogReference          *CatalogReference        `xml:"CatalogReference"`
	TimeReference             *TimeReference           `xml:"TimeReference"`
	TrajectoryFollowingMode   *TrajectoryFollowingMode `xml:"TrajectoryFollowingMode"`
	TrajectoryRef             *TrajectoryRef           `xml:"TrajectoryRef"`
}

// Gear ...
type Gear struct {
	ManualGear    *ManualGear
	AutomaticGear *AutomaticGear
}

// GeoPosition ...
type GeoPosition struct {
	LatitudeAttr              *Double      `xml:"latitude,attr,omitempty"`
	LongitudeAttr             *Double      `xml:"longitude,attr,omitempty"`
	HeightAttr                *Double      `xml:"height,attr,omitempty"`
	LatitudeDegAttr           *Double      `xml:"latitudeDeg,attr,omitempty"`
	LongitudeDegAttr          *Double      `xml:"longitudeDeg,attr,omitempty"`
	AltitudeAttr              *Double      `xml:"altitude,attr,omitempty"`
	VerticalRoadSelectionAttr *Int         `xml:"verticalRoadSelection,attr,omitempty"`
	Orientation               *Orientation `xml:"Orientation"`
}

// GlobalAction is deprecated
type GlobalAction struct {
	EnvironmentAction    *EnvironmentAction    `xml:"EnvironmentAction"`
	EntityAction         *EntityAction         `xml:"EntityAction"`
	InfrastructureAction *InfrastructureAction `xml:"InfrastructureAction"`
	SetMonitorAction     *SetMonitorAction     `xml:"SetMonitorAction"`
	ParameterAction      *ParameterAction      `xml:"ParameterAction"`
	TrafficAction        *TrafficAction        `xml:"TrafficAction"`
	VariableAction       *VariableAction       `xml:"VariableAction"`
}

// Histogram ...
type Histogram struct {
	Bin []*HistogramBin `xml:"Bin"`
}

// HistogramBin ...
type HistogramBin struct {
	WeightAttr *Double `xml:"weight,attr"`
	Range      *Range  `xml:"Range"`
}

// InfrastructureAction ...
type InfrastructureAction struct {
	TrafficSignalAction *TrafficSignalAction `xml:"TrafficSignalAction"`
}

// Init ...
type Init struct {
	Actions *InitActions `xml:"Actions"`
}

// InitActions ...
type InitActions struct {
	GlobalAction      []*GlobalAction      `xml:"GlobalAction"`
	UserDefinedAction []*UserDefinedAction `xml:"UserDefinedAction"`
	Private           []*Private           `xml:"Private"`
}

// InRoutePosition ...
type InRoutePosition struct {
	FromCurrentEntity   *PositionOfCurrentEntity   `xml:"FromCurrentEntity"`
	FromRoadCoordinates *PositionInRoadCoordinates `xml:"FromRoadCoordinates"`
	FromLaneCoordinates *PositionInLaneCoordinates `xml:"FromLaneCoordinates"`
}

// Knot ...
type Knot struct {
	ValueAttr *Double `xml:"value,attr"`
}

// Lane ...
type Lane struct {
	IdAttr *Int `xml:"id,attr"`
}

// LaneChangeAction ...
type LaneChangeAction struct {
	TargetLaneOffsetAttr     *Double             `xml:"targetLaneOffset,attr,omitempty"`
	LaneChangeActionDynamics *TransitionDynamics `xml:"LaneChangeActionDynamics"`
	LaneChangeTarget         *LaneChangeTarget   `xml:"LaneChangeTarget"`
}

// LaneChangeTarget ...
type LaneChangeTarget struct {
	RelativeTargetLane *RelativeTargetLane `xml:"RelativeTargetLane"`
	AbsoluteTargetLane *AbsoluteTargetLane `xml:"AbsoluteTargetLane"`
}

// LaneOffsetAction ...
type LaneOffsetAction struct {
	ContinuousAttr           *Boolean                  `xml:"continuous,attr"`
	LaneOffsetActionDynamics *LaneOffsetActionDynamics `xml:"LaneOffsetActionDynamics"`
	LaneOffsetTarget         *LaneOffsetTarget         `xml:"LaneOffsetTarget"`
}

// LaneOffsetActionDynamics ...
type LaneOffsetActionDynamics struct {
	DynamicsShapeAttr *DynamicsShape `xml:"dynamicsShape,attr"`
	MaxLateralAccAttr *Double        `xml:"maxLateralAcc,attr,omitempty"`
}

// LaneOffsetTarget ...
type LaneOffsetTarget struct {
	RelativeTargetLaneOffset *RelativeTargetLaneOffset `xml:"RelativeTargetLaneOffset"`
	AbsoluteTargetLaneOffset *AbsoluteTargetLaneOffset `xml:"AbsoluteTargetLaneOffset"`
}

// LanePosition ...
type LanePosition struct {
	LaneIdAttr  *String      `xml:"laneId,attr"`
	OffsetAttr  *Double      `xml:"offset,attr,omitempty"`
	RoadIdAttr  *String      `xml:"roadId,attr"`
	SAttr       *Double      `xml:"s,attr"`
	Orientation *Orientation `xml:"Orientation"`
}

// LateralAction ...
type LateralAction struct {
	LaneChangeAction      *LaneChangeAction      `xml:"LaneChangeAction"`
	LaneOffsetAction      *LaneOffsetAction      `xml:"LaneOffsetAction"`
	LateralDistanceAction *LateralDistanceAction `xml:"LateralDistanceAction"`
}

// LateralDistanceAction ...
type LateralDistanceAction struct {
	EntityRefAttr        *String              `xml:"entityRef,attr"`
	ContinuousAttr       *Boolean             `xml:"continuous,attr"`
	DistanceAttr         *Double              `xml:"distance,attr,omitempty"`
	FreespaceAttr        *Boolean             `xml:"freespace,attr"`
	DisplacementAttr     *LateralDisplacement `xml:"displacement,attr,omitempty"`
	CoordinateSystemAttr *CoordinateSystem    `xml:"coordinateSystem,attr,omitempty"`
	DynamicConstraints   *DynamicConstraints  `xml:"DynamicConstraints"`
}

// License ...
type License struct {
	NameAttr     *String `xml:"name,attr"`
	ResourceAttr *String `xml:"resource,attr,omitempty"`
	SpdxIdAttr   *String `xml:"spdxId,attr,omitempty"`
	Value        string  `xml:",chardata"`
}

// LightState ...
type LightState struct {
	ModeAttr                *LightMode `xml:"mode,attr"`
	LuminousIntensityAttr   *Double    `xml:"luminousIntensity,attr,omitempty"`
	FlashingOnDurationAttr  *Double    `xml:"flashingOnDuration,attr,omitempty"`
	FlashingOffDurationAttr *Double    `xml:"flashingOffDuration,attr,omitempty"`
	Color                   *Color     `xml:"Color"`
}

// LightStateAction ...
type LightStateAction struct {
	TransitionTimeAttr *Double     `xml:"transitionTime,attr,omitempty"`
	LightType          *LightType  `xml:"LightType"`
	LightState         *LightState `xml:"LightState"`
}

// LightType ...
type LightType struct {
	VehicleLight     *VehicleLight     `xml:"VehicleLight"`
	UserDefinedLight *UserDefinedLight `xml:"UserDefinedLight"`
}

// LogNormalDistribution ...
type LogNormalDistribution struct {
	ExpectedValueAttr *Double `xml:"expectedValue,attr"`
	VarianceAttr      *Double `xml:"variance,attr"`
	Range             *Range  `xml:"Range"`
}

// LongitudinalAction ...
type LongitudinalAction struct {
	SpeedAction                *SpeedAction                `xml:"SpeedAction"`
	LongitudinalDistanceAction *LongitudinalDistanceAction `xml:"LongitudinalDistanceAction"`
	SpeedProfileAction         *SpeedProfileAction         `xml:"SpeedProfileAction"`
}

// LongitudinalDistanceAction ...
type LongitudinalDistanceAction struct {
	EntityRefAttr        *String                   `xml:"entityRef,attr"`
	ContinuousAttr       *Boolean                  `xml:"continuous,attr"`
	DistanceAttr         *Double                   `xml:"distance,attr,omitempty"`
	FreespaceAttr        *Boolean                  `xml:"freespace,attr"`
	TimeGapAttr          *Double                   `xml:"timeGap,attr,omitempty"`
	DisplacementAttr     *LongitudinalDisplacement `xml:"displacement,attr,omitempty"`
	CoordinateSystemAttr *CoordinateSystem         `xml:"coordinateSystem,attr,omitempty"`
	DynamicConstraints   *DynamicConstraints       `xml:"DynamicConstraints"`
}

// Maneuver ...
type Maneuver struct {
	NameAttr              *String                `xml:"name,attr"`
	ParameterDeclarations *ParameterDeclarations `xml:"ParameterDeclarations"`
	Event                 []*Event               `xml:"Event"`
}

// ManeuverCatalogLocation ...
type ManeuverCatalogLocation struct {
	Directory *Directory `xml:"Directory"`
}

// ManeuverGroup ...
type ManeuverGroup struct {
	MaximumExecutionCountAttr *UnsignedInt        `xml:"maximumExecutionCount,attr"`
	NameAttr                  *String             `xml:"name,attr"`
	Actors                    *Actors             `xml:"Actors"`
	CatalogReference          []*CatalogReference `xml:"CatalogReference"`
	Maneuver                  []*Maneuver         `xml:"Maneuver"`
}

// ManualGear ...
type ManualGear struct {
	NumberAttr *Int `xml:"number,attr"`
}

// MiscObject ...
type MiscObject struct {
	MassAttr               *Double                `xml:"mass,attr"`
	MiscObjectCategoryAttr *MiscObjectCategory    `xml:"miscObjectCategory,attr"`
	NameAttr               *String                `xml:"name,attr"`
	Model3dAttr            *String                `xml:"model3d,attr,omitempty"`
	ParameterDeclarations  *ParameterDeclarations `xml:"ParameterDeclarations"`
	BoundingBox            *BoundingBox           `xml:"BoundingBox"`
	Properties             *Properties            `xml:"Properties"`
}

// MiscObjectCatalogLocation ...
type MiscObjectCatalogLocation struct {
	Directory *Directory `xml:"Directory"`
}

// ModifyRule is deprecated
type ModifyRule struct {
	AddValue        *ParameterAddValueRule        `xml:"AddValue"`
	MultiplyByValue *ParameterMultiplyByValueRule `xml:"MultiplyByValue"`
}

// MonitorDeclaration ...
type MonitorDeclaration struct {
	NameAttr  *String  `xml:"name,attr"`
	ValueAttr *Boolean `xml:"value,attr"`
}

// MonitorDeclarations ...
type MonitorDeclarations struct {
	MonitorDeclaration []*MonitorDeclaration `xml:"MonitorDeclaration"`
}

// None ...
type None struct {
}

// NormalDistribution ...
type NormalDistribution struct {
	ExpectedValueAttr *Double `xml:"expectedValue,attr"`
	VarianceAttr      *Double `xml:"variance,attr"`
	Range             *Range  `xml:"Range"`
}

// Nurbs ...
type Nurbs struct {
	OrderAttr    *UnsignedInt    `xml:"order,attr"`
	ControlPoint []*ControlPoint `xml:"ControlPoint"`
	Knot         []*Knot         `xml:"Knot"`
}

// ObjectController ...
type ObjectController struct {
	NameAttr         *String           `xml:"name,attr,omitempty"`
	CatalogReference *CatalogReference `xml:"CatalogReference"`
	Controller       *Controller       `xml:"Controller"`
}

// OffroadCondition ...
type OffroadCondition struct {
	DurationAttr *Double `xml:"duration,attr"`
}

// OpenScenario ...
type OpenScenario struct {
	OpenScenarioCategory *OpenScenarioCategory
	FileHeader           *FileHeader `xml:"FileHeader"`
}

// OpenScenarioCategory ...
type OpenScenarioCategory struct {
	ScenarioDefinition                   *ScenarioDefinition
	CatalogDefinition                    *CatalogDefinition
	ParameterValueDistributionDefinition *ParameterValueDistributionDefinition
}

// Orientation ...
type Orientation struct {
	HAttr    *Double           `xml:"h,attr,omitempty"`
	PAttr    *Double           `xml:"p,attr,omitempty"`
	RAttr    *Double           `xml:"r,attr,omitempty"`
	TypeAttr *ReferenceContext `xml:"type,attr,omitempty"`
}

// OverrideBrakeAction ...
type OverrideBrakeAction struct {
	ActiveAttr *Boolean `xml:"active,attr"`
	ValueAttr  *Double  `xml:"value,attr,omitempty"`
	BrakeInput *BrakeInput
}

// OverrideClutchAction ...
type OverrideClutchAction struct {
	ActiveAttr  *Boolean `xml:"active,attr"`
	ValueAttr   *Double  `xml:"value,attr"`
	MaxRateAttr *Double  `xml:"maxRate,attr,omitempty"`
}

// OverrideControllerValueAction ...
type OverrideControllerValueAction struct {
	Throttle      *OverrideThrottleAction      `xml:"Throttle"`
	Brake         *OverrideBrakeAction         `xml:"Brake"`
	Clutch        *OverrideClutchAction        `xml:"Clutch"`
	ParkingBrake  *OverrideParkingBrakeAction  `xml:"ParkingBrake"`
	SteeringWheel *OverrideSteeringWheelAction `xml:"SteeringWheel"`
	Gear          *OverrideGearAction          `xml:"Gear"`
}

// OverrideGearAction ...
type OverrideGearAction struct {
	ActiveAttr *Boolean `xml:"active,attr"`
	NumberAttr *Double  `xml:"number,attr,omitempty"`
	Gear       *Gear
}

// OverrideParkingBrakeAction ...
type OverrideParkingBrakeAction struct {
	ActiveAttr *Boolean `xml:"active,attr"`
	ValueAttr  *Double  `xml:"value,attr,omitempty"`
	BrakeInput *BrakeInput
}

// OverrideSteeringWheelAction ...
type OverrideSteeringWheelAction struct {
	ActiveAttr    *Boolean `xml:"active,attr"`
	ValueAttr     *Double  `xml:"value,attr"`
	MaxRateAttr   *Double  `xml:"maxRate,attr,omitempty"`
	MaxTorqueAttr *Double  `xml:"maxTorque,attr,omitempty"`
}

// OverrideThrottleAction ...
type OverrideThrottleAction struct {
	ActiveAttr  *Boolean `xml:"active,attr"`
	ValueAttr   *Double  `xml:"value,attr"`
	MaxRateAttr *Double  `xml:"maxRate,attr,omitempty"`
}

// ParameterAction is deprecated
type ParameterAction struct {
	ParameterRefAttr *String                `xml:"parameterRef,attr"`
	SetAction        *ParameterSetAction    `xml:"SetAction"`
	ModifyAction     *ParameterModifyAction `xml:"ModifyAction"`
}

// ParameterAddValueRule is deprecated
type ParameterAddValueRule struct {
	ValueAttr *Double `xml:"value,attr"`
}

// ParameterAssignment ...
type ParameterAssignment struct {
	ParameterRefAttr *String `xml:"parameterRef,attr"`
	ValueAttr        *String `xml:"value,attr"`
}

// ParameterAssignments ...
type ParameterAssignments struct {
	ParameterAssignment []*ParameterAssignment `xml:"ParameterAssignment"`
}

// ParameterCondition ...
type ParameterCondition struct {
	ParameterRefAttr *String `xml:"parameterRef,attr"`
	RuleAttr         *Rule   `xml:"rule,attr"`
	ValueAttr        *String `xml:"value,attr"`
}

// ParameterDeclaration ...
type ParameterDeclaration struct {
	NameAttr          *String                 `xml:"name,attr"`
	ParameterTypeAttr *ParameterType          `xml:"parameterType,attr"`
	ValueAttr         *String                 `xml:"value,attr"`
	ConstraintGroup   []*ValueConstraintGroup `xml:"ConstraintGroup"`
}

// ParameterDeclarations ...
type ParameterDeclarations struct {
	ParameterDeclaration []*ParameterDeclaration `xml:"ParameterDeclaration"`
}

// ParameterModifyAction is deprecated
type ParameterModifyAction struct {
	Rule *ModifyRule `xml:"Rule"`
}

// ParameterMultiplyByValueRule is deprecated
type ParameterMultiplyByValueRule struct {
	ValueAttr *Double `xml:"value,attr"`
}

// ParameterSetAction is deprecated
type ParameterSetAction struct {
	ValueAttr *String `xml:"value,attr"`
}

// ParameterValueDistribution ...
type ParameterValueDistribution struct {
	DistributionDefinition *DistributionDefinition
	ScenarioFile           *File `xml:"ScenarioFile"`
}

// ParameterValueDistributionDefinition ...
type ParameterValueDistributionDefinition struct {
	ParameterValueDistribution *ParameterValueDistribution
}

// ParameterValueSet ...
type ParameterValueSet struct {
	ParameterAssignment []*ParameterAssignment `xml:"ParameterAssignment"`
}

// Pedestrian ...
type Pedestrian struct {
	MassAttr               *Double                `xml:"mass,attr"`
	ModelAttr              *String                `xml:"model,attr,omitempty"`
	NameAttr               *String                `xml:"name,attr"`
	PedestrianCategoryAttr *PedestrianCategory    `xml:"pedestrianCategory,attr"`
	Model3dAttr            *String                `xml:"model3d,attr,omitempty"`
	RoleAttr               *Role                  `xml:"role,attr,omitempty"`
	ParameterDeclarations  *ParameterDeclarations `xml:"ParameterDeclarations"`
	BoundingBox            *BoundingBox           `xml:"BoundingBox"`
	Properties             *Properties            `xml:"Properties"`
}

// PedestrianAnimation ...
type PedestrianAnimation struct {
	MotionAttr                         *PedestrianMotionType `xml:"motion,attr,omitempty"`
	UserDefinedPedestrianAnimationAttr *String               `xml:"userDefinedPedestrianAnimation,attr,omitempty"`
	PedestrianGesture                  []*PedestrianGesture  `xml:"PedestrianGesture"`
}

// PedestrianCatalogLocation ...
type PedestrianCatalogLocation struct {
	Directory *Directory `xml:"Directory"`
}

// PedestrianGesture ...
type PedestrianGesture struct {
	GestureAttr *PedestrianGestureType `xml:"gesture,attr"`
}

// Performance ...
type Performance struct {
	MaxAccelerationAttr     *Double `xml:"maxAcceleration,attr"`
	MaxAccelerationRateAttr *Double `xml:"maxAccelerationRate,attr,omitempty"`
	MaxDecelerationAttr     *Double `xml:"maxDeceleration,attr"`
	MaxDecelerationRateAttr *Double `xml:"maxDecelerationRate,attr,omitempty"`
	MaxSpeedAttr            *Double `xml:"maxSpeed,attr"`
}

// Phase ...
type Phase struct {
	DurationAttr            *Double                  `xml:"duration,attr"`
	NameAttr                *String                  `xml:"name,attr"`
	TrafficSignalState      []*TrafficSignalState    `xml:"TrafficSignalState"`
	TrafficSignalGroupState *TrafficSignalGroupState `xml:"TrafficSignalGroupState"`
}

// PoissonDistribution ...
type PoissonDistribution struct {
	ExpectedValueAttr *Double `xml:"expectedValue,attr"`
	Range             *Range  `xml:"Range"`
}

// Polygon ...
type Polygon struct {
	Position []*Position `xml:"Position"`
}

// Polyline ...
type Polyline struct {
	Vertex []*Vertex `xml:"Vertex"`
}

// Position ...
type Position struct {
	WorldPosition          *WorldPosition          `xml:"WorldPosition"`
	RelativeWorldPosition  *RelativeWorldPosition  `xml:"RelativeWorldPosition"`
	RelativeObjectPosition *RelativeObjectPosition `xml:"RelativeObjectPosition"`
	RoadPosition           *RoadPosition           `xml:"RoadPosition"`
	RelativeRoadPosition   *RelativeRoadPosition   `xml:"RelativeRoadPosition"`
	LanePosition           *LanePosition           `xml:"LanePosition"`
	RelativeLanePosition   *RelativeLanePosition   `xml:"RelativeLanePosition"`
	RoutePosition          *RoutePosition          `xml:"RoutePosition"`
	GeoPosition            *GeoPosition            `xml:"GeoPosition"`
	TrajectoryPosition     *TrajectoryPosition     `xml:"TrajectoryPosition"`
}

// PositionInLaneCoordinates ...
type PositionInLaneCoordinates struct {
	LaneIdAttr     *String `xml:"laneId,attr"`
	LaneOffsetAttr *Double `xml:"laneOffset,attr,omitempty"`
	PathSAttr      *Double `xml:"pathS,attr"`
}

// PositionInRoadCoordinates ...
type PositionInRoadCoordinates struct {
	PathSAttr *Double `xml:"pathS,attr"`
	TAttr     *Double `xml:"t,attr"`
}

// PositionOfCurrentEntity ...
type PositionOfCurrentEntity struct {
	EntityRefAttr *String `xml:"entityRef,attr"`
}

// Precipitation ...
type Precipitation struct {
	IntensityAttr              *Double            `xml:"intensity,attr,omitempty"`
	PrecipitationTypeAttr      *PrecipitationType `xml:"precipitationType,attr"`
	PrecipitationIntensityAttr *Double            `xml:"precipitationIntensity,attr,omitempty"`
}

// Private ...
type Private struct {
	EntityRefAttr *String          `xml:"entityRef,attr"`
	PrivateAction []*PrivateAction `xml:"PrivateAction"`
}

// PrivateAction is deprecated
type PrivateAction struct {
	LongitudinalAction       *LongitudinalAction       `xml:"LongitudinalAction"`
	LateralAction            *LateralAction            `xml:"LateralAction"`
	VisibilityAction         *VisibilityAction         `xml:"VisibilityAction"`
	SynchronizeAction        *SynchronizeAction        `xml:"SynchronizeAction"`
	ActivateControllerAction *ActivateControllerAction `xml:"ActivateControllerAction"`
	ControllerAction         *ControllerAction         `xml:"ControllerAction"`
	TeleportAction           *TeleportAction           `xml:"TeleportAction"`
	RoutingAction            *RoutingAction            `xml:"RoutingAction"`
	AppearanceAction         *AppearanceAction         `xml:"AppearanceAction"`
	TrailerAction            *TrailerAction            `xml:"TrailerAction"`
}

// ProbabilityDistributionSet ...
type ProbabilityDistributionSet struct {
	Element []*ProbabilityDistributionSetElement `xml:"Element"`
}

// ProbabilityDistributionSetElement ...
type ProbabilityDistributionSetElement struct {
	ValueAttr  *String `xml:"value,attr"`
	WeightAttr *Double `xml:"weight,attr"`
}

// Properties ...
type Properties struct {
	Property      []*Property      `xml:"Property"`
	File          []*File          `xml:"File"`
	CustomContent []*CustomContent `xml:"CustomContent"`
}

// Property ...
type Property struct {
	NameAttr  *String `xml:"name,attr"`
	ValueAttr *String `xml:"value,attr"`
}

// RandomRouteAction ...
type RandomRouteAction struct {
}

// Range ...
type Range struct {
	LowerLimitAttr *Double `xml:"lowerLimit,attr"`
	UpperLimitAttr *Double `xml:"upperLimit,attr"`
}

// ReachPositionCondition is deprecated
type ReachPositionCondition struct {
	ToleranceAttr *Double   `xml:"tolerance,attr"`
	Position      *Position `xml:"Position"`
}

// RelativeAngleCondition ...
type RelativeAngleCondition struct {
	EntityRefAttr        *String           `xml:"entityRef,attr"`
	AngleTypeAttr        *AngleType        `xml:"angleType,attr"`
	AngleAttr            *Double           `xml:"angle,attr"`
	AngleToleranceAttr   *Double           `xml:"angleTolerance,attr"`
	CoordinateSystemAttr *CoordinateSystem `xml:"coordinateSystem,attr,omitempty"`
}

// RelativeClearanceCondition ...
type RelativeClearanceCondition struct {
	OppositeLanesAttr    *Boolean             `xml:"oppositeLanes,attr"`
	DistanceForwardAttr  *Double              `xml:"distanceForward,attr,omitempty"`
	DistanceBackwardAttr *Double              `xml:"distanceBackward,attr,omitempty"`
	FreeSpaceAttr        *Boolean             `xml:"freeSpace,attr"`
	RelativeLaneRange    []*RelativeLaneRange `xml:"RelativeLaneRange"`
	EntityRef            []*EntityRef         `xml:"EntityRef"`
}

// RelativeDistanceCondition ...
type RelativeDistanceCondition struct {
	EntityRefAttr            *String               `xml:"entityRef,attr"`
	FreespaceAttr            *Boolean              `xml:"freespace,attr"`
	RelativeDistanceTypeAttr *RelativeDistanceType `xml:"relativeDistanceType,attr"`
	RuleAttr                 *Rule                 `xml:"rule,attr"`
	ValueAttr                *Double               `xml:"value,attr"`
	CoordinateSystemAttr     *CoordinateSystem     `xml:"coordinateSystem,attr,omitempty"`
	RoutingAlgorithmAttr     *RoutingAlgorithm     `xml:"routingAlgorithm,attr,omitempty"`
}

// RelativeLanePosition ...
type RelativeLanePosition struct {
	EntityRefAttr *String      `xml:"entityRef,attr"`
	DLaneAttr     *Int         `xml:"dLane,attr"`
	DsAttr        *Double      `xml:"ds,attr,omitempty"`
	OffsetAttr    *Double      `xml:"offset,attr,omitempty"`
	DsLaneAttr    *Double      `xml:"dsLane,attr,omitempty"`
	Orientation   *Orientation `xml:"Orientation"`
}

// RelativeLaneRange ...
type RelativeLaneRange struct {
	FromAttr *Int `xml:"from,attr,omitempty"`
	ToAttr   *Int `xml:"to,attr,omitempty"`
}

// RelativeObjectPosition ...
type RelativeObjectPosition struct {
	EntityRefAttr *String      `xml:"entityRef,attr"`
	DxAttr        *Double      `xml:"dx,attr"`
	DyAttr        *Double      `xml:"dy,attr"`
	DzAttr        *Double      `xml:"dz,attr,omitempty"`
	Orientation   *Orientation `xml:"Orientation"`
}

// RelativeRoadPosition ...
type RelativeRoadPosition struct {
	EntityRefAttr *String      `xml:"entityRef,attr"`
	DsAttr        *Double      `xml:"ds,attr"`
	DtAttr        *Double      `xml:"dt,attr"`
	Orientation   *Orientation `xml:"Orientation"`
}

// RelativeSpeedCondition ...
type RelativeSpeedCondition struct {
	EntityRefAttr *String               `xml:"entityRef,attr"`
	RuleAttr      *Rule                 `xml:"rule,attr"`
	ValueAttr     *Double               `xml:"value,attr"`
	DirectionAttr *DirectionalDimension `xml:"direction,attr,omitempty"`
}

// RelativeSpeedToMaster ...
type RelativeSpeedToMaster struct {
	SpeedTargetValueTypeAttr *SpeedTargetValueType `xml:"speedTargetValueType,attr"`
	ValueAttr                *Double               `xml:"value,attr"`
	SteadyState              *SteadyState
}

// RelativeTargetLane ...
type RelativeTargetLane struct {
	EntityRefAttr *String `xml:"entityRef,attr"`
	ValueAttr     *Int    `xml:"value,attr"`
}

// RelativeTargetLaneOffset ...
type RelativeTargetLaneOffset struct {
	EntityRefAttr *String `xml:"entityRef,attr"`
	ValueAttr     *Double `xml:"value,attr"`
}

// RelativeTargetSpeed ...
type RelativeTargetSpeed struct {
	EntityRefAttr            *String               `xml:"entityRef,attr"`
	ContinuousAttr           *Boolean              `xml:"continuous,attr"`
	SpeedTargetValueTypeAttr *SpeedTargetValueType `xml:"speedTargetValueType,attr"`
	ValueAttr                *Double               `xml:"value,attr"`
}

// RelativeWorldPosition ...
type RelativeWorldPosition struct {
	EntityRefAttr *String      `xml:"entityRef,attr"`
	DxAttr        *Double      `xml:"dx,attr"`
	DyAttr        *Double      `xml:"dy,attr"`
	DzAttr        *Double      `xml:"dz,attr,omitempty"`
	Orientation   *Orientation `xml:"Orientation"`
}

// RoadCondition ...
type RoadCondition struct {
	FrictionScaleFactorAttr *Double     `xml:"frictionScaleFactor,attr"`
	WetnessAttr             *Wetness    `xml:"wetness,attr,omitempty"`
	Properties              *Properties `xml:"Properties"`
}

// RoadCursor ...
type RoadCursor struct {
	RoadIdAttr *String `xml:"roadId,attr"`
	SAttr      *Double `xml:"s,attr,omitempty"`
	Lane       []*Lane `xml:"Lane"`
}

// RoadNetwork ...
type RoadNetwork struct {
	LogicFile      *File           `xml:"LogicFile"`
	SceneGraphFile *File           `xml:"SceneGraphFile"`
	TrafficSignals *TrafficSignals `xml:"TrafficSignals"`
	UsedArea       *UsedArea       `xml:"UsedArea"`
}

// RoadPosition ...
type RoadPosition struct {
	RoadIdAttr  *String      `xml:"roadId,attr"`
	SAttr       *Double      `xml:"s,attr"`
	TAttr       *Double      `xml:"t,attr"`
	Orientation *Orientation `xml:"Orientation"`
}

// RoadRange ...
type RoadRange struct {
	LengthAttr *Double       `xml:"length,attr,omitempty"`
	RoadCursor []*RoadCursor `xml:"RoadCursor"`
}

// Route ...
type Route struct {
	ClosedAttr            *Boolean               `xml:"closed,attr"`
	NameAttr              *String                `xml:"name,attr"`
	ParameterDeclarations *ParameterDeclarations `xml:"ParameterDeclarations"`
	Waypoint              []*Waypoint            `xml:"Waypoint"`
}

// RouteCatalogLocation ...
type RouteCatalogLocation struct {
	Directory *Directory `xml:"Directory"`
}

// RoutePosition ...
type RoutePosition struct {
	RouteRef        *RouteRef        `xml:"RouteRef"`
	Orientation     *Orientation     `xml:"Orientation"`
	InRoutePosition *InRoutePosition `xml:"InRoutePosition"`
}

// RouteRef ...
type RouteRef struct {
	Route            *Route            `xml:"Route"`
	CatalogReference *CatalogReference `xml:"CatalogReference"`
}

// RoutingAction ...
type RoutingAction struct {
	AssignRouteAction      *AssignRouteAction      `xml:"AssignRouteAction"`
	FollowTrajectoryAction *FollowTrajectoryAction `xml:"FollowTrajectoryAction"`
	AcquirePositionAction  *AcquirePositionAction  `xml:"AcquirePositionAction"`
	RandomRouteAction      *RandomRouteAction      `xml:"RandomRouteAction"`
}

// ScenarioDefinition ...
type ScenarioDefinition struct {
	ParameterDeclarations *ParameterDeclarations
	VariableDeclarations  *VariableDeclarations
	MonitorDeclarations   *MonitorDeclarations
	CatalogLocations      *CatalogLocations
	RoadNetwork           *RoadNetwork
	Entities              *Entities
	Storyboard            *Storyboard
}

// ScenarioObject ...
type ScenarioObject struct {
	NameAttr         *String `xml:"name,attr"`
	EntityObject     *EntityObject
	ObjectController []*ObjectController `xml:"ObjectController"`
}

// ScenarioObjectTemplate ...
type ScenarioObjectTemplate struct {
	EntityObject     *EntityObject
	ObjectController []*ObjectController `xml:"ObjectController"`
}

// SelectedEntities ...
type SelectedEntities struct {
	EntityRef []*EntityRef `xml:"EntityRef"`
	ByType    []*ByType    `xml:"ByType"`
}

// SensorReference ...
type SensorReference struct {
	NameAttr *String `xml:"name,attr"`
}

// SensorReferenceSet ...
type SensorReferenceSet struct {
	SensorReference []*SensorReference `xml:"SensorReference"`
}

// SetMonitorAction ...
type SetMonitorAction struct {
	MonitorRefAttr *String  `xml:"monitorRef,attr"`
	ValueAttr      *Boolean `xml:"value,attr"`
}

// Shape ...
type Shape struct {
	Polyline       *Polyline       `xml:"Polyline"`
	Clothoid       *Clothoid       `xml:"Clothoid"`
	ClothoidSpline *ClothoidSpline `xml:"ClothoidSpline"`
	Nurbs          *Nurbs          `xml:"Nurbs"`
}

// SimulationTimeCondition ...
type SimulationTimeCondition struct {
	RuleAttr  *Rule   `xml:"rule,attr"`
	ValueAttr *Double `xml:"value,attr"`
}

// SpeedAction ...
type SpeedAction struct {
	SpeedActionDynamics *TransitionDynamics `xml:"SpeedActionDynamics"`
	SpeedActionTarget   *SpeedActionTarget  `xml:"SpeedActionTarget"`
}

// SpeedActionTarget ...
type SpeedActionTarget struct {
	RelativeTargetSpeed *RelativeTargetSpeed `xml:"RelativeTargetSpeed"`
	AbsoluteTargetSpeed *AbsoluteTargetSpeed `xml:"AbsoluteTargetSpeed"`
}

// SpeedCondition ...
type SpeedCondition struct {
	RuleAttr      *Rule                 `xml:"rule,attr"`
	ValueAttr     *Double               `xml:"value,attr"`
	DirectionAttr *DirectionalDimension `xml:"direction,attr,omitempty"`
}

// SpeedProfileAction ...
type SpeedProfileAction struct {
	EntityRefAttr      *String              `xml:"entityRef,attr,omitempty"`
	FollowingModeAttr  *FollowingMode       `xml:"followingMode,attr"`
	DynamicConstraints *DynamicConstraints  `xml:"DynamicConstraints"`
	SpeedProfileEntry  []*SpeedProfileEntry `xml:"SpeedProfileEntry"`
}

// SpeedProfileEntry ...
type SpeedProfileEntry struct {
	SpeedAttr *Double `xml:"speed,attr"`
	TimeAttr  *Double `xml:"time,attr,omitempty"`
}

// StandStillCondition ...
type StandStillCondition struct {
	DurationAttr *Double `xml:"duration,attr"`
}

// SteadyState ...
type SteadyState struct {
	TargetDistanceSteadyState *TargetDistanceSteadyState
	TargetTimeSteadyState     *TargetTimeSteadyState
}

// Stochastic ...
type Stochastic struct {
	NumberOfTestRunsAttr   *UnsignedInt              `xml:"numberOfTestRuns,attr"`
	RandomSeedAttr         *Double                   `xml:"randomSeed,attr,omitempty"`
	StochasticDistribution []*StochasticDistribution `xml:"StochasticDistribution"`
}

// StochasticDistribution ...
type StochasticDistribution struct {
	ParameterNameAttr          *String `xml:"parameterName,attr"`
	StochasticDistributionType *StochasticDistributionType
}

// StochasticDistributionType ...
type StochasticDistributionType struct {
	ProbabilityDistributionSet *ProbabilityDistributionSet
	NormalDistribution         *NormalDistribution
	LogNormalDistribution      *LogNormalDistribution
	UniformDistribution        *UniformDistribution
	PoissonDistribution        *PoissonDistribution
	Histogram                  *Histogram
	UserDefinedDistribution    *UserDefinedDistribution
}

// Story ...
type Story struct {
	NameAttr              *String                `xml:"name,attr"`
	ParameterDeclarations *ParameterDeclarations `xml:"ParameterDeclarations"`
	Act                   []*Act                 `xml:"Act"`
}

// Storyboard ...
type Storyboard struct {
	Init        *Init    `xml:"Init"`
	Story       []*Story `xml:"Story"`
	StopTrigger *Trigger `xml:"StopTrigger"`
}

// StoryboardElementStateCondition ...
type StoryboardElementStateCondition struct {
	StoryboardElementRefAttr  *String                 `xml:"storyboardElementRef,attr"`
	StateAttr                 *StoryboardElementState `xml:"state,attr"`
	StoryboardElementTypeAttr *StoryboardElementType  `xml:"storyboardElementType,attr"`
}

// Sun ...
type Sun struct {
	AzimuthAttr     *Double `xml:"azimuth,attr"`
	ElevationAttr   *Double `xml:"elevation,attr"`
	IntensityAttr   *Double `xml:"intensity,attr,omitempty"`
	IlluminanceAttr *Double `xml:"illuminance,attr,omitempty"`
}

// SynchronizeAction ...
type SynchronizeAction struct {
	MasterEntityRefAttr       *String     `xml:"masterEntityRef,attr"`
	TargetToleranceMasterAttr *Double     `xml:"targetToleranceMaster,attr,omitempty"`
	TargetToleranceAttr       *Double     `xml:"targetTolerance,attr,omitempty"`
	TargetPositionMaster      *Position   `xml:"TargetPositionMaster"`
	TargetPosition            *Position   `xml:"TargetPosition"`
	FinalSpeed                *FinalSpeed `xml:"FinalSpeed"`
}

// TargetDistanceSteadyState ...
type TargetDistanceSteadyState struct {
	DistanceAttr *Double `xml:"distance,attr"`
}

// TargetTimeSteadyState ...
type TargetTimeSteadyState struct {
	TimeAttr *Double `xml:"time,attr"`
}

// TeleportAction ...
type TeleportAction struct {
	Position *Position `xml:"Position"`
}

// TimeHeadwayCondition ...
type TimeHeadwayCondition struct {
	EntityRefAttr            *String               `xml:"entityRef,attr"`
	AlongRouteAttr           *Boolean              `xml:"alongRoute,attr,omitempty"`
	FreespaceAttr            *Boolean              `xml:"freespace,attr"`
	RuleAttr                 *Rule                 `xml:"rule,attr"`
	ValueAttr                *Double               `xml:"value,attr"`
	CoordinateSystemAttr     *CoordinateSystem     `xml:"coordinateSystem,attr,omitempty"`
	RelativeDistanceTypeAttr *RelativeDistanceType `xml:"relativeDistanceType,attr,omitempty"`
	RoutingAlgorithmAttr     *RoutingAlgorithm     `xml:"routingAlgorithm,attr,omitempty"`
}

// TimeOfDay ...
type TimeOfDay struct {
	AnimationAttr *Boolean  `xml:"animation,attr"`
	DateTimeAttr  *DateTime `xml:"dateTime,attr"`
}

// TimeOfDayCondition ...
type TimeOfDayCondition struct {
	DateTimeAttr *DateTime `xml:"dateTime,attr"`
	RuleAttr     *Rule     `xml:"rule,attr"`
}

// TimeReference ...
type TimeReference struct {
	None   *None   `xml:"None"`
	Timing *Timing `xml:"Timing"`
}

// TimeToCollisionCondition ...
type TimeToCollisionCondition struct {
	AlongRouteAttr                 *Boolean                        `xml:"alongRoute,attr,omitempty"`
	FreespaceAttr                  *Boolean                        `xml:"freespace,attr"`
	RuleAttr                       *Rule                           `xml:"rule,attr"`
	ValueAttr                      *Double                         `xml:"value,attr"`
	RelativeDistanceTypeAttr       *RelativeDistanceType           `xml:"relativeDistanceType,attr,omitempty"`
	CoordinateSystemAttr           *CoordinateSystem               `xml:"coordinateSystem,attr,omitempty"`
	RoutingAlgorithmAttr           *RoutingAlgorithm               `xml:"routingAlgorithm,attr,omitempty"`
	TimeToCollisionConditionTarget *TimeToCollisionConditionTarget `xml:"TimeToCollisionConditionTarget"`
}

// TimeToCollisionConditionTarget ...
type TimeToCollisionConditionTarget struct {
	Position  *Position  `xml:"Position"`
	EntityRef *EntityRef `xml:"EntityRef"`
}

// Timing ...
type Timing struct {
	DomainAbsoluteRelativeAttr *ReferenceContext `xml:"domainAbsoluteRelative,attr"`
	OffsetAttr                 *Double           `xml:"offset,attr"`
	ScaleAttr                  *Double           `xml:"scale,attr"`
}

// TrafficAction ...
type TrafficAction struct {
	TrafficNameAttr     *String              `xml:"trafficName,attr,omitempty"`
	TrafficSourceAction *TrafficSourceAction `xml:"TrafficSourceAction"`
	TrafficSinkAction   *TrafficSinkAction   `xml:"TrafficSinkAction"`
	TrafficSwarmAction  *TrafficSwarmAction  `xml:"TrafficSwarmAction"`
	TrafficAreaAction   *TrafficAreaAction   `xml:"TrafficAreaAction"`
	TrafficStopAction   *TrafficStopAction   `xml:"TrafficStopAction"`
}

// TrafficArea ...
type TrafficArea struct {
	Polygon   *Polygon     `xml:"Polygon"`
	RoadRange []*RoadRange `xml:"RoadRange"`
}

// TrafficAreaAction ...
type TrafficAreaAction struct {
	NumberOfEntitiesAttr *UnsignedInt         `xml:"numberOfEntities,attr"`
	ContinuousAttr       *Boolean             `xml:"continuous,attr"`
	TrafficDistribution  *TrafficDistribution `xml:"TrafficDistribution"`
	TrafficArea          *TrafficArea         `xml:"TrafficArea"`
}

// TrafficDefinition ...
type TrafficDefinition struct {
	NameAttr                    *String                      `xml:"name,attr"`
	VehicleCategoryDistribution *VehicleCategoryDistribution `xml:"VehicleCategoryDistribution"`
	VehicleRoleDistribution     *VehicleRoleDistribution     `xml:"VehicleRoleDistribution"`
	ControllerDistribution      *ControllerDistribution      `xml:"ControllerDistribution"`
}

// TrafficDistribution ...
type TrafficDistribution struct {
	TrafficDistributionEntry []*TrafficDistributionEntry `xml:"TrafficDistributionEntry"`
}

// TrafficDistributionEntry ...
type TrafficDistributionEntry struct {
	WeightAttr         *Double             `xml:"weight,attr"`
	EntityDistribution *EntityDistribution `xml:"EntityDistribution"`
	Properties         *Properties         `xml:"Properties"`
}

// TrafficSignalAction ...
type TrafficSignalAction struct {
	TrafficSignalControllerAction *TrafficSignalControllerAction `xml:"TrafficSignalControllerAction"`
	TrafficSignalStateAction      *TrafficSignalStateAction      `xml:"TrafficSignalStateAction"`
}

// TrafficSignalCondition ...
type TrafficSignalCondition struct {
	NameAttr  *String `xml:"name,attr"`
	StateAttr *String `xml:"state,attr"`
}

// TrafficSignalController ...
type TrafficSignalController struct {
	DelayAttr     *Double  `xml:"delay,attr,omitempty"`
	NameAttr      *String  `xml:"name,attr"`
	ReferenceAttr *String  `xml:"reference,attr,omitempty"`
	Phase         []*Phase `xml:"Phase"`
}

// TrafficSignals ...
type TrafficSignals struct {
	TrafficSignalController []*TrafficSignalController `xml:"TrafficSignalController"`
}

// TrafficSignalControllerAction ...
type TrafficSignalControllerAction struct {
	TrafficSignalControllerRefAttr *String `xml:"trafficSignalControllerRef,attr"`
	PhaseAttr                      *String `xml:"phase,attr"`
}

// TrafficSignalControllerCondition ...
type TrafficSignalControllerCondition struct {
	TrafficSignalControllerRefAttr *String `xml:"trafficSignalControllerRef,attr"`
	PhaseAttr                      *String `xml:"phase,attr"`
}

// TrafficSignalGroupState ...
type TrafficSignalGroupState struct {
	StateAttr *String `xml:"state,attr"`
}

// TrafficSignalState ...
type TrafficSignalState struct {
	StateAttr           *String `xml:"state,attr"`
	TrafficSignalIdAttr *String `xml:"trafficSignalId,attr"`
}

// TrafficSignalStateAction ...
type TrafficSignalStateAction struct {
	NameAttr  *String `xml:"name,attr"`
	StateAttr *String `xml:"state,attr"`
}

// TrafficSinkAction is deprecated
type TrafficSinkAction struct {
	RadiusAttr        *Double            `xml:"radius,attr"`
	RateAttr          *Double            `xml:"rate,attr,omitempty"`
	Position          *Position          `xml:"Position"`
	TrafficDefinition *TrafficDefinition `xml:"TrafficDefinition"`
}

// TrafficSourceAction is deprecated
type TrafficSourceAction struct {
	RadiusAttr          *Double              `xml:"radius,attr"`
	RateAttr            *Double              `xml:"rate,attr"`
	VelocityAttr        *Double              `xml:"velocity,attr,omitempty"`
	SpeedAttr           *Double              `xml:"speed,attr,omitempty"`
	Position            *Position            `xml:"Position"`
	TrafficDefinition   *TrafficDefinition   `xml:"TrafficDefinition"`
	TrafficDistribution *TrafficDistribution `xml:"TrafficDistribution"`
}

// TrafficStopAction ...
type TrafficStopAction struct {
}

// TrafficSwarmAction is deprecated
type TrafficSwarmAction struct {
	InnerRadiusAttr               *Double                        `xml:"innerRadius,attr"`
	NumberOfVehiclesAttr          *UnsignedInt                   `xml:"numberOfVehicles,attr"`
	OffsetAttr                    *Double                        `xml:"offset,attr"`
	SemiMajorAxisAttr             *Double                        `xml:"semiMajorAxis,attr"`
	SemiMinorAxisAttr             *Double                        `xml:"semiMinorAxis,attr"`
	VelocityAttr                  *Double                        `xml:"velocity,attr,omitempty"`
	CentralObject                 *CentralSwarmObject            `xml:"CentralObject"`
	TrafficDefinition             *TrafficDefinition             `xml:"TrafficDefinition"`
	TrafficDistribution           *TrafficDistribution           `xml:"TrafficDistribution"`
	InitialSpeedRange             *Range                         `xml:"InitialSpeedRange"`
	DirectionOfTravelDistribution *DirectionOfTravelDistribution `xml:"DirectionOfTravelDistribution"`
}

// Trailer ...
type Trailer struct {
	Trailer    *ScenarioObject `xml:"Trailer"`
	TrailerRef *EntityRef      `xml:"TrailerRef"`
}

// TrailerAction ...
type TrailerAction struct {
	ConnectTrailerAction    *ConnectTrailerAction    `xml:"ConnectTrailerAction"`
	DisconnectTrailerAction *DisconnectTrailerAction `xml:"DisconnectTrailerAction"`
}

// TrailerCoupler ...
type TrailerCoupler struct {
	DxAttr *Double `xml:"dx,attr"`
	DzAttr *Double `xml:"dz,attr,omitempty"`
}

// TrailerHitch ...
type TrailerHitch struct {
	DxAttr *Double `xml:"dx,attr"`
	DzAttr *Double `xml:"dz,attr,omitempty"`
}

// Trajectory ...
type Trajectory struct {
	ClosedAttr            *Boolean               `xml:"closed,attr"`
	NameAttr              *String                `xml:"name,attr"`
	ParameterDeclarations *ParameterDeclarations `xml:"ParameterDeclarations"`
	Shape                 *Shape                 `xml:"Shape"`
}

// TrajectoryCatalogLocation ...
type TrajectoryCatalogLocation struct {
	Directory *Directory `xml:"Directory"`
}

// TrajectoryFollowingMode ...
type TrajectoryFollowingMode struct {
	FollowingModeAttr *FollowingMode `xml:"followingMode,attr"`
}

// TrajectoryPosition ...
type TrajectoryPosition struct {
	SAttr         *Double        `xml:"s,attr"`
	TAttr         *Double        `xml:"t,attr,omitempty"`
	Orientation   *Orientation   `xml:"Orientation"`
	TrajectoryRef *TrajectoryRef `xml:"TrajectoryRef"`
}

// TrajectoryRef ...
type TrajectoryRef struct {
	Trajectory       *Trajectory       `xml:"Trajectory"`
	CatalogReference *CatalogReference `xml:"CatalogReference"`
}

// TransitionDynamics ...
type TransitionDynamics struct {
	DynamicsDimensionAttr *DynamicsDimension `xml:"dynamicsDimension,attr"`
	DynamicsShapeAttr     *DynamicsShape     `xml:"dynamicsShape,attr"`
	FollowingModeAttr     *FollowingMode     `xml:"followingMode,attr,omitempty"`
	ValueAttr             *Double            `xml:"value,attr"`
}

// TraveledDistanceCondition ...
type TraveledDistanceCondition struct {
	ValueAttr *Double `xml:"value,attr"`
}

// Trigger ...
type Trigger struct {
	ConditionGroup []*ConditionGroup `xml:"ConditionGroup"`
}

// TriggeringEntities ...
type TriggeringEntities struct {
	TriggeringEntitiesRuleAttr *TriggeringEntitiesRule `xml:"triggeringEntitiesRule,attr"`
	EntityRef                  []*EntityRef            `xml:"EntityRef"`
}

// UniformDistribution ...
type UniformDistribution struct {
	Range *Range `xml:"Range"`
}

// UsedArea ...
type UsedArea struct {
	Position []*Position `xml:"Position"`
}

// UserDefinedAction ...
type UserDefinedAction struct {
	CustomCommandAction *CustomCommandAction `xml:"CustomCommandAction"`
}

// UserDefinedAnimation ...
type UserDefinedAnimation struct {
	UserDefinedAnimationTypeAttr *String `xml:"userDefinedAnimationType,attr"`
}

// UserDefinedComponent ...
type UserDefinedComponent struct {
	UserDefinedComponentTypeAttr *String `xml:"userDefinedComponentType,attr"`
}

// UserDefinedDistribution ...
type UserDefinedDistribution struct {
	TypeAttr *String `xml:"type,attr"`
	Value    string  `xml:",chardata"`
}

// UserDefinedLight ...
type UserDefinedLight struct {
	UserDefinedLightTypeAttr *String `xml:"userDefinedLightType,attr"`
}

// UserDefinedValueCondition ...
type UserDefinedValueCondition struct {
	NameAttr  *String `xml:"name,attr"`
	RuleAttr  *Rule   `xml:"rule,attr"`
	ValueAttr *String `xml:"value,attr"`
}

// ValueConstraint ...
type ValueConstraint struct {
	RuleAttr  *Rule   `xml:"rule,attr"`
	ValueAttr *String `xml:"value,attr"`
}

// ValueConstraintGroup ...
type ValueConstraintGroup struct {
	ValueConstraint []*ValueConstraint `xml:"ValueConstraint"`
}

// ValueSetDistribution ...
type ValueSetDistribution struct {
	ParameterValueSet []*ParameterValueSet `xml:"ParameterValueSet"`
}

// VariableAction ...
type VariableAction struct {
	VariableRefAttr *String               `xml:"variableRef,attr"`
	SetAction       *VariableSetAction    `xml:"SetAction"`
	ModifyAction    *VariableModifyAction `xml:"ModifyAction"`
}

// VariableAddValueRule ...
type VariableAddValueRule struct {
	ValueAttr *Double `xml:"value,attr"`
}

// VariableCondition ...
type VariableCondition struct {
	VariableRefAttr *String `xml:"variableRef,attr"`
	RuleAttr        *Rule   `xml:"rule,attr"`
	ValueAttr       *String `xml:"value,attr"`
}

// VariableDeclaration ...
type VariableDeclaration struct {
	NameAttr         *String        `xml:"name,attr"`
	VariableTypeAttr *ParameterType `xml:"variableType,attr"`
	ValueAttr        *String        `xml:"value,attr"`
}

// VariableDeclarations ...
type VariableDeclarations struct {
	VariableDeclaration []*VariableDeclaration `xml:"VariableDeclaration"`
}

// VariableModifyAction ...
type VariableModifyAction struct {
	Rule *VariableModifyRule `xml:"Rule"`
}

// VariableModifyRule ...
type VariableModifyRule struct {
	AddValue        *VariableAddValueRule        `xml:"AddValue"`
	MultiplyByValue *VariableMultiplyByValueRule `xml:"MultiplyByValue"`
}

// VariableMultiplyByValueRule ...
type VariableMultiplyByValueRule struct {
	ValueAttr *Double `xml:"value,attr"`
}

// VariableSetAction ...
type VariableSetAction struct {
	ValueAttr *String `xml:"value,attr"`
}

// Vehicle ...
type Vehicle struct {
	NameAttr              *String                `xml:"name,attr"`
	VehicleCategoryAttr   *VehicleCategory       `xml:"vehicleCategory,attr"`
	RoleAttr              *Role                  `xml:"role,attr,omitempty"`
	MassAttr              *Double                `xml:"mass,attr,omitempty"`
	Model3dAttr           *String                `xml:"model3d,attr,omitempty"`
	ParameterDeclarations *ParameterDeclarations `xml:"ParameterDeclarations"`
	BoundingBox           *BoundingBox           `xml:"BoundingBox"`
	Performance           *Performance           `xml:"Performance"`
	Axles                 *Axles                 `xml:"Axles"`
	Properties            *Properties            `xml:"Properties"`
	TrailerHitch          *TrailerHitch          `xml:"TrailerHitch"`
	TrailerCoupler        *TrailerCoupler        `xml:"TrailerCoupler"`
	Trailer               *Trailer               `xml:"Trailer"`
}

// VehicleCatalogLocation ...
type VehicleCatalogLocation struct {
	Directory *Directory `xml:"Directory"`
}

// VehicleCategoryDistribution ...
type VehicleCategoryDistribution struct {
	VehicleCategoryDistributionEntry []*VehicleCategoryDistributionEntry `xml:"VehicleCategoryDistributionEntry"`
}

// VehicleCategoryDistributionEntry ...
type VehicleCategoryDistributionEntry struct {
	CategoryAttr *VehicleCategory `xml:"category,attr"`
	WeightAttr   *Double          `xml:"weight,attr"`
}

// VehicleComponent ...
type VehicleComponent struct {
	VehicleComponentTypeAttr *VehicleComponentType `xml:"vehicleComponentType,attr"`
}

// VehicleLight ...
type VehicleLight struct {
	VehicleLightTypeAttr *VehicleLightType `xml:"vehicleLightType,attr"`
}

// VehicleRoleDistribution ...
type VehicleRoleDistribution struct {
	VehicleRoleDistributionEntry []*VehicleRoleDistributionEntry `xml:"VehicleRoleDistributionEntry"`
}

// VehicleRoleDistributionEntry ...
type VehicleRoleDistributionEntry struct {
	RoleAttr   *Role   `xml:"role,attr"`
	WeightAttr *Double `xml:"weight,attr"`
}

// Vertex ...
type Vertex struct {
	TimeAttr *Double   `xml:"time,attr,omitempty"`
	Position *Position `xml:"Position"`
}

// VisibilityAction ...
type VisibilityAction struct {
	GraphicsAttr       *Boolean            `xml:"graphics,attr"`
	SensorsAttr        *Boolean            `xml:"sensors,attr"`
	TrafficAttr        *Boolean            `xml:"traffic,attr"`
	SensorReferenceSet *SensorReferenceSet `xml:"SensorReferenceSet"`
}

// Waypoint ...
type Waypoint struct {
	RouteStrategyAttr *RouteStrategy `xml:"routeStrategy,attr"`
	Position          *Position      `xml:"Position"`
}

// Weather ...
type Weather struct {
	CloudStateAttr           *CloudState           `xml:"cloudState,attr,omitempty"`
	AtmosphericPressureAttr  *Double               `xml:"atmosphericPressure,attr,omitempty"`
	TemperatureAttr          *Double               `xml:"temperature,attr,omitempty"`
	FractionalCloudCoverAttr *FractionalCloudCover `xml:"fractionalCloudCover,attr,omitempty"`
	Sun                      *Sun                  `xml:"Sun"`
	Fog                      *Fog                  `xml:"Fog"`
	Precipitation            *Precipitation        `xml:"Precipitation"`
	Wind                     *Wind                 `xml:"Wind"`
	DomeImage                *DomeImage            `xml:"DomeImage"`
}

// Wind ...
type Wind struct {
	DirectionAttr *Double `xml:"direction,attr"`
	SpeedAttr     *Double `xml:"speed,attr"`
}

// WorldPosition ...
type WorldPosition struct {
	HAttr *Double `xml:"h,attr,omitempty"`
	PAttr *Double `xml:"p,attr,omitempty"`
	RAttr *Double `xml:"r,attr,omitempty"`
	XAttr *Double `xml:"x,attr"`
	YAttr *Double `xml:"y,attr"`
	ZAttr *Double `xml:"z,attr,omitempty"`
}
